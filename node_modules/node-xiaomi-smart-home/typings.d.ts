declare module 'node-xiaomi-smart-home/Types/HubMessage' {
	interface HubMessage {
	    cmd: string;
	    model: string;
	    sid: string;
	    short_id: string;
	    token: string;
	    ip: string;
	    data: any;
	}
	export default HubMessage;

}
declare module 'node-xiaomi-smart-home/Sensors/GenericSensor' {
	import { Hub } from 'node-xiaomi-smart-home/Hub';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class GenericSensor {
	    private lastHeartBeat;
	    data: any;
	    hub: Hub;
	    sid: string;
	    type: string;
	    constructor(sid: string, hub: Hub);
	    onMessage(message: HubMessage): void;
	    heartBeat(): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/Gateway' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import { Hub } from 'node-xiaomi-smart-home/Hub';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class Gateway extends GenericSensor {
	    constructor(sid: string, hub: Hub);
	    onMessage(message: HubMessage): void;
	    initSensors(sids: string[]): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/THSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class THSensor extends GenericSensor {
	    private temperature;
	    private humidity;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/DoorSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class DoorSensor extends GenericSensor {
	    private closed;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/MotionSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class MotionSensor extends GenericSensor {
	    private motion;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/Plug' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class Plug extends GenericSensor {
	    private on;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/Button' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class Button extends GenericSensor {
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/WaterLeakSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class WaterLeakSensor extends GenericSensor {
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/WeatherSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class WeatherSensor extends GenericSensor {
	    private temperature;
	    private humidity;
	    private pressure;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Sensors/SmokeSensor' {
	import GenericSensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	import HubMessage from 'node-xiaomi-smart-home/Types/HubMessage';
	export default class SmokeSensor extends GenericSensor {
	    private voltage;
	    private density;
	    private alarm;
	    onMessage(message: HubMessage): void;
	}

}
declare module 'node-xiaomi-smart-home/Hub' {
	/// <reference types="node" />
	import { Socket } from 'dgram';
	import events = require('events');
	import Sensor from 'node-xiaomi-smart-home/Sensors/GenericSensor';
	export class Hub extends events.EventEmitter {
	    socket: Socket;
	    sensors: {
	        [id: string]: Sensor;
	    };
	    sensorTypes: {
	        gateway: string;
	        th: string;
	        button: string;
	        plug: string;
	        magnet: string;
	        motion: string;
	        weather: string;
	        new_magnet: string;
	        waterleak: string;
	        smoke: string;
	    };
	    clickTypes: {
	        click: string;
	        double_click: string;
	        long_click_press: string;
	        long_click_release: string;
	    };
	    leakTypes: {
	        leak: string;
	        no_leak: string;
	    };
	    constructor();
	    listen(): void;
	    stop(cb: Function): void;
	    private onListening();
	    private onError(err);
	    private onMessage(msgBuffer);
	    sendMessage(message: any): void;
	    private sensorFactory(sid, model);
	    private getSensor(sid);
	    private registerSensor(sensor);
	}

}
